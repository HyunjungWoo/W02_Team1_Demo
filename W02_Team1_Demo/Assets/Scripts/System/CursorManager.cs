using System.Linq;
using UnityEngine;

public class CursorManager : MonoBehaviour
{
   public static CursorManager Instance { get; private set; }

    [Header("Ï°∞Ï§Ä Î≥¥Ï†ï ÏÑ§Ï†ï")]
    [SerializeField] private float aimAssistRadius = 0.5f;
    [SerializeField] private Texture2D lockOnCursorTexture;
    [SerializeField] private LayerMask enemyLayer;

    [Header("Ïª§ÏÑú Ìï´Ïä§Ìåü (Ï§ëÏã¨Ï†ê)")]
    [SerializeField] private Vector2 hotSpotOffset = Vector2.zero;
    
    // üéØ Ïô∏Î∂ÄÏóêÏÑú ÌòÑÏû¨ Ï°∞Ï§ÄÎêú Ï†ÅÏùÑ ÌôïÏù∏Ìï† Ïàò ÏûàÎèÑÎ°ù public ÌîÑÎ°úÌçºÌã∞Î°ú ÏÑ†Ïñ∏
    public Transform LockedOnEnemy { get; private set; }

    private Camera mainCamera;
    private bool isAimAssistActive = false;

    private void Awake()
    {
        // Ïã±Í∏ÄÌÜ§ Ìå®ÌÑ¥ Íµ¨ÌòÑ
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
        }
        else
        {
            Instance = this;
            // DontDestroyOnLoad(gameObject); // Ïî¨Ïù¥ Î∞îÎÄåÏñ¥ÎèÑ ÌååÍ¥¥ÎêòÏßÄ ÏïäÍ≤å ÌïòÎ†§Î©¥ Ï£ºÏÑù Ìï¥Ï†ú
        }
    }

    private void Start()
    {
        mainCamera = Camera.main;
    }

    private void Update()
    {
        // Ï°∞Ï§Ä Î≥¥Ï†ïÏù¥ ÌôúÏÑ±ÌôîÎêú ÏÉÅÌÉúÏùº ÎïåÎßå Îß§ ÌîÑÎ†àÏûÑ Ïã§Ìñâ
        if (isAimAssistActive)
        {
            UpdateAimAssistTarget();
        }
    }

    // Ïô∏Î∂Ä(PlayerController)ÏóêÏÑú Ï°∞Ï§Ä Î≥¥Ï†ïÏùÑ ÏºúÍ≥† ÎÅå Ïàò ÏûàÎèÑÎ°ù public Ìï®ÏàòÎ°ú ÎßåÎì¶
    public void SetAimAssistActive(bool isActive)
    {
        isAimAssistActive = isActive;
        if (!isActive)
        {
            ResetToDefaultCursor();
        }
    }

    private void UpdateAimAssistTarget()
    {
        Vector2 mousePosition = mainCamera.ScreenToWorldPoint(Input.mousePosition);

        // ÎßàÏö∞Ïä§ Ï£ºÎ≥ÄÏùò Î™®Îì† Ï†Å ÏΩúÎùºÏù¥ÎçîÎ•º Í∞ÄÏ†∏Ïò¥
        Collider2D[] enemiesInRange = Physics2D.OverlapCircleAll(mousePosition, aimAssistRadius, enemyLayer);

        // LINQÎ•º ÏÇ¨Ïö©Ìï¥ Í∞ÄÏû• Í∞ÄÍπåÏö¥ Ï†ÅÏùÑ Ï∞æÏùå (ÏóÜÏúºÎ©¥ null)
        LockedOnEnemy = enemiesInRange
            .OrderBy(enemy => Vector2.Distance(mousePosition, enemy.transform.position))
            .FirstOrDefault()?.transform;

        // Ï°∞Ï§Ä ÎåÄÏÉÅ Ïú†Î¨¥Ïóê Îî∞Îùº Ïª§ÏÑú Î™®Ïñë Î≥ÄÍ≤Ω
        if (LockedOnEnemy != null)
        {
            SetCursor(lockOnCursorTexture);
        }
        else
        {
            ResetToDefaultCursor();
        }
    }
    private void SetCursor(Texture2D cursorTexture)
    {
        if (cursorTexture == null)
        {
            ResetToDefaultCursor();
            return;
        }
        Vector2 hotSpot = new Vector2(cursorTexture.width / 2, cursorTexture.height / 2) + hotSpotOffset;
        Cursor.SetCursor(cursorTexture, hotSpot, CursorMode.Auto);
    }
    
    private void ResetToDefaultCursor()
    {
        LockedOnEnemy = null;
        Cursor.SetCursor(null, Vector2.zero, CursorMode.Auto);
    }
}
